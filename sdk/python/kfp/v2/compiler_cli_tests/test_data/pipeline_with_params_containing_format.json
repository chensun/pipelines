{
  "pipelineSpec": {
    "components": {
      "comp-importer": {
        "executorLabel": "exec-importer",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-importer-2": {
        "executorLabel": "exec-importer-2",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-print-op": {
        "executorLabel": "exec-print-op",
        "inputDefinitions": {
          "parameters": {
            "text": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-importer": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "typeSchema": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-importer-2": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "typeSchema": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-print-op": {
          "container": {
            "args": [
              "--text",
              "{{$.inputs.parameters['text']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(text):\n  print(text)\n  return text\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of str.'.format(str(str_value), str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='')\n_parser.add_argument(\"--text\", dest=\"text\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = print_op(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "pipeline-with-pipelineparam-containing-format-1"
    },
    "root": {
      "dag": {
        "tasks": {
          "importer": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer"
            },
            "inputs": {
              "parameters": {
                "pipelineparam--data_root": {
                  "componentInputParameter": "data_root"
                },
                "uri": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{{$.inputs.parameters['pipelineparam--data_root']}}/shakespeare1.txt"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "importer"
            }
          },
          "importer-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer-2"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "componentInputParameter": "dataset2"
                }
              }
            },
            "taskInfo": {
              "name": "importer-2"
            }
          },
          "print-op": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-print-op"
            },
            "inputs": {
              "parameters": {
                "pipelineparam--data_root": {
                  "componentInputParameter": "data_root"
                },
                "text": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{{$.inputs.parameters['pipelineparam--data_root']}}/shakespeare1.txt"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "print-op"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "data_root": {
            "type": "STRING"
          },
          "dataset2": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.7.1"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "dummy_root",
    "parameters": {
      "data_root": {
        "stringValue": "gs://ml-pipeline-playground"
      },
      "dataset2": {
        "stringValue": "gs://ml-pipeline-playground/shakespeare2.txt"
      }
    }
  }
}